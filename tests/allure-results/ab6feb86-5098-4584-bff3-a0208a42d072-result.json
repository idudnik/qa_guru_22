{"name": "test_local_search_appium", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 119\nCurrent browser version is 121.0.6167.184 with binary path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome\nStacktrace:\n0   chromedriver                        0x0000000100afa004 chromedriver + 4169732\n1   chromedriver                        0x0000000100af1ff8 chromedriver + 4136952\n2   chromedriver                        0x0000000100747500 chromedriver + 292096\n3   chromedriver                        0x000000010077d95c chromedriver + 514396\n4   chromedriver                        0x000000010077cb98 chromedriver + 510872\n5   chromedriver                        0x0000000100778244 chromedriver + 492100\n6   chromedriver                        0x00000001007755b8 chromedriver + 480696\n7   chromedriver                        0x00000001007b7754 chromedriver + 751444\n8   chromedriver                        0x00000001007805e8 chromedriver + 525800\n9   chromedriver                        0x00000001007814b8 chromedriver + 529592\n10  chromedriver                        0x0000000100ac0334 chromedriver + 3932980\n11  chromedriver                        0x0000000100ac4970 chromedriver + 3950960\n12  chromedriver                        0x0000000100aa8774 chromedriver + 3835764\n13  chromedriver                        0x0000000100ac5478 chromedriver + 3953784\n14  chromedriver                        0x0000000100a9aab4 chromedriver + 3779252\n15  chromedriver                        0x0000000100ae1914 chromedriver + 4069652\n16  chromedriver                        0x0000000100ae1a90 chromedriver + 4070032\n17  chromedriver                        0x0000000100af1c70 chromedriver + 4136048\n18  libsystem_pthread.dylib             0x00000001a12effa8 _pthread_start + 148\n19  libsystem_pthread.dylib             0x00000001a12eada0 thread_start + 8", "trace": "fn = <selene.core.wait.Command object at 0x106b1d4f0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../venv/lib/python3.12/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../venv/lib/python3.12/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n../venv/lib/python3.12/site-packages/selene/core/entity.py:525: in raw_click\n    element.locate().click()\n../venv/lib/python3.12/site-packages/selene/core/entity.py:185: in locate\n    return self._locator()\n../venv/lib/python3.12/site-packages/selene/core/locator.py:34: in __call__\n    return self._locate()\n../venv/lib/python3.12/site-packages/selene/core/_browser.py:71: in <lambda>\n    Locator(f'{self}.element({by})', lambda: self.driver.find_element(*by)),\n../venv/lib/python3.12/site-packages/selene/core/_browser.py:34: in driver\n    return self.config.driver\n../venv/lib/python3.12/site-packages/selene/core/configuration.py:301: in __get__\n    driver = config.build_driver_strategy(config)\n../venv/lib/python3.12/site-packages/selene/core/configuration.py:129: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n../venv/lib/python3.12/site-packages/selene/core/configuration.py:66: in build_chrome\n    return Chrome(\n../venv/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../venv/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\n../venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n../venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1071b6510>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...0001a12effa8 _pthread_start + 148\\\\n19  libsystem_pthread.dylib             0x00000001a12eada0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 119\nE       Current browser version is 121.0.6167.184 with binary path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome\nE       Stacktrace:\nE       0   chromedriver                        0x0000000102ac6004 chromedriver + 4169732\nE       1   chromedriver                        0x0000000102abdff8 chromedriver + 4136952\nE       2   chromedriver                        0x0000000102713500 chromedriver + 292096\nE       3   chromedriver                        0x000000010274995c chromedriver + 514396\nE       4   chromedriver                        0x0000000102748b98 chromedriver + 510872\nE       5   chromedriver                        0x0000000102744244 chromedriver + 492100\nE       6   chromedriver                        0x00000001027415b8 chromedriver + 480696\nE       7   chromedriver                        0x0000000102783754 chromedriver + 751444\nE       8   chromedriver                        0x000000010274c5e8 chromedriver + 525800\nE       9   chromedriver                        0x000000010274d4b8 chromedriver + 529592\nE       10  chromedriver                        0x0000000102a8c334 chromedriver + 3932980\nE       11  chromedriver                        0x0000000102a90970 chromedriver + 3950960\nE       12  chromedriver                        0x0000000102a74774 chromedriver + 3835764\nE       13  chromedriver                        0x0000000102a91478 chromedriver + 3953784\nE       14  chromedriver                        0x0000000102a66ab4 chromedriver + 3779252\nE       15  chromedriver                        0x0000000102aad914 chromedriver + 4069652\nE       16  chromedriver                        0x0000000102aada90 chromedriver + 4070032\nE       17  chromedriver                        0x0000000102abdc70 chromedriver + 4136048\nE       18  libsystem_pthread.dylib             0x00000001a12effa8 _pthread_start + 148\nE       19  libsystem_pthread.dylib             0x00000001a12eada0 thread_start + 8\n\n../venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.local\n    def test_local_search_appium():\n        with step(\"Skip main screen\"):\n>           browser.element((AppiumBy.ID, \"org.wikipedia.alpha:id/fragment_onboarding_skip_button\")).click()\n\ntest_wikipedia.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../venv/lib/python3.12/site-packages/selene/core/entity.py:529: in click\n    self.wait.for_(\n../venv/lib/python3.12/site-packages/selene/core/wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n../venv/lib/python3.12/site-packages/selene/core/wait.py:141: in logic\n    raise self._hook_failure(failure)\n../venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../venv/lib/python3.12/site-packages/selene/core/configuration.py:1407: in save_and_log_screenshot\n    path = self._save_screenshot_strategy(self)\n../venv/lib/python3.12/site-packages/selene/core/configuration.py:1235: in <lambda>\n    ] = lambda config, path=None: fp.thread(\n../venv/lib/python3.12/site-packages/selene/common/fp.py:83: in thread\n    return pipe(*functions)(arg)\n../venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../venv/lib/python3.12/site-packages/selene/common/fp.py:73: in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n../venv/lib/python3.12/site-packages/selene/core/configuration.py:1266: in <lambda>\n    lambda path: (path if config.driver.get_screenshot_as_file(path) else None),\n../venv/lib/python3.12/site-packages/selene/core/configuration.py:301: in __get__\n    driver = config.build_driver_strategy(config)\n../venv/lib/python3.12/site-packages/selene/core/configuration.py:129: in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n../venv/lib/python3.12/site-packages/selene/core/configuration.py:66: in build_chrome\n    return Chrome(\n../venv/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../venv/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\n../venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n../venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10734bcb0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...0001a12effa8 _pthread_start + 148\\\\n19  libsystem_pthread.dylib             0x00000001a12eada0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 119\nE       Current browser version is 121.0.6167.184 with binary path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100afa004 chromedriver + 4169732\nE       1   chromedriver                        0x0000000100af1ff8 chromedriver + 4136952\nE       2   chromedriver                        0x0000000100747500 chromedriver + 292096\nE       3   chromedriver                        0x000000010077d95c chromedriver + 514396\nE       4   chromedriver                        0x000000010077cb98 chromedriver + 510872\nE       5   chromedriver                        0x0000000100778244 chromedriver + 492100\nE       6   chromedriver                        0x00000001007755b8 chromedriver + 480696\nE       7   chromedriver                        0x00000001007b7754 chromedriver + 751444\nE       8   chromedriver                        0x00000001007805e8 chromedriver + 525800\nE       9   chromedriver                        0x00000001007814b8 chromedriver + 529592\nE       10  chromedriver                        0x0000000100ac0334 chromedriver + 3932980\nE       11  chromedriver                        0x0000000100ac4970 chromedriver + 3950960\nE       12  chromedriver                        0x0000000100aa8774 chromedriver + 3835764\nE       13  chromedriver                        0x0000000100ac5478 chromedriver + 3953784\nE       14  chromedriver                        0x0000000100a9aab4 chromedriver + 3779252\nE       15  chromedriver                        0x0000000100ae1914 chromedriver + 4069652\nE       16  chromedriver                        0x0000000100ae1a90 chromedriver + 4070032\nE       17  chromedriver                        0x0000000100af1c70 chromedriver + 4136048\nE       18  libsystem_pthread.dylib             0x00000001a12effa8 _pthread_start + 148\nE       19  libsystem_pthread.dylib             0x00000001a12eada0 thread_start + 8\n\n../venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException"}, "steps": [{"name": "Skip main screen", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 119\nCurrent browser version is 121.0.6167.184 with binary path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome\nStacktrace:\n0   chromedriver                        0x0000000100afa004 chromedriver + 4169732\n1   chromedriver                        0x0000000100af1ff8 chromedriver + 4136952\n2   chromedriver                        0x0000000100747500 chromedriver + 292096\n3   chromedriver                        0x000000010077d95c chromedriver + 514396\n4   chromedriver                        0x000000010077cb98 chromedriver + 510872\n5   chromedriver                        0x0000000100778244 chromedriver + 492100\n6   chromedriver                        0x00000001007755b8 chromedriver + 480696\n7   chromedriver                        0x00000001007b7754 chromedriver + 751444\n8   chromedriver                        0x00000001007805e8 chromedriver + 525800\n9   chromedriver                        0x00000001007814b8 chromedriver + 529592\n10  chromedriver                        0x0000000100ac0334 chromedriver + 3932980\n11  chromedriver                        0x0000000100ac4970 chromedriver + 3950960\n12  chromedriver                        0x0000000100aa8774 chromedriver + 3835764\n13  chromedriver                        0x0000000100ac5478 chromedriver + 3953784\n14  chromedriver                        0x0000000100a9aab4 chromedriver + 3779252\n15  chromedriver                        0x0000000100ae1914 chromedriver + 4069652\n16  chromedriver                        0x0000000100ae1a90 chromedriver + 4070032\n17  chromedriver                        0x0000000100af1c70 chromedriver + 4136048\n18  libsystem_pthread.dylib             0x00000001a12effa8 _pthread_start + 148\n19  libsystem_pthread.dylib             0x00000001a12eada0 thread_start + 8\n\n", "trace": "  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/tests/test_wikipedia.py\", line 9, in test_local_search_appium\n    browser.element((AppiumBy.ID, \"org.wikipedia.alpha:id/fragment_onboarding_skip_button\")).click()\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/core/entity.py\", line 529, in click\n    self.wait.for_(\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/core/wait.py\", line 143, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/core/wait.py\", line 141, in logic\n    raise self._hook_failure(failure)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/common/fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                             ^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/core/configuration.py\", line 1407, in save_and_log_screenshot\n    path = self._save_screenshot_strategy(self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/core/configuration.py\", line 1235, in <lambda>\n    ] = lambda config, path=None: fp.thread(\n                                  ^^^^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/common/fp.py\", line 83, in thread\n    return pipe(*functions)(arg)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/common/fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/common/fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/common/fp.py\", line 73, in <lambda>\n    lambda f, g: lambda x: f(g(x)) if g else f(x),\n                           ^^^^^^^\n  [Previous line repeated 2 more times]\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/core/configuration.py\", line 1266, in <lambda>\n    lambda path: (path if config.driver.get_screenshot_as_file(path) else None),\n                          ^^^^^^^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/core/configuration.py\", line 301, in __get__\n    driver = config.build_driver_strategy(config)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/core/configuration.py\", line 129, in _build_local_driver_by_name_or_remote_by_url_and_options\n    return {  # type: ignore\n           ^^^^^^^^^^^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selene/core/configuration.py\", line 66, in build_chrome\n    return Chrome(\n           ^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py\", line 61, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 208, in __init__\n    self.start_session(capabilities)\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 292, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/stanislavdudnik/Desktop/Git/qa_guru_22/venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1708597441716, "stop": 1708597452705}], "attachments": [{"name": "log", "source": "bb465f5b-8fea-423d-bb77-7a5cbd37848d-attachment.txt", "type": "text/plain"}], "start": 1708597441716, "stop": 1708597452726, "uuid": "03fa6c24-2b09-49d5-bc57-946919fa7f62", "historyId": "d6569f22fda5e889f811d55c42e00074", "testCaseId": "d6569f22fda5e889f811d55c42e00074", "fullName": "tests.test_wikipedia#test_local_search_appium", "labels": [{"name": "tag", "value": "local"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_wikipedia"}, {"name": "host", "value": "MacBook-Air-2.local"}, {"name": "thread", "value": "34863-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_wikipedia"}]}